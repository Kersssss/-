'''
Author: Kerrrs 2541822105@qq.com
Date: 2023-02-13 22:41:12
LastEditors: Kerrrs 2541822105@qq.com
LastEditTime: 2023-03-01 11:39:23
FilePath: \python_learn\笔记\总笔记.py
Description: 

Copyright (c) 2023 by ${git_name_email}, All Rights Reserved. 
'''


"""----------基础语句----------"""
"""
python模块导入用(import 模块名称)
print()                         #输出

input()                         #输入

整型(int)
浮点型(float)
布尔类型(bool)
字符串(str)

----------分支结构----------
————————if语句(if语句的核心是值为True或False的表达式)

if 条件表达式1:
    代码块1
elif 条件表达式2:
    代码块2
elif 条件表达式3:
    代码块3
...
else:
    结束代码块
    
----------三元表达式----------

语句1 if 条件表达式 else 语句2
(条件表达式成立则执行语句1,不成立则执行语句2)

----------循环结构----------
————————while循环(通常需要设置一个计数器来判断循环,避免进入死循环)

while 条件表达式:
    代码段
    
————while...else...循环

while 条件表达式:
    代码块1
    代码块2
else:
    代码块3

————————for循环(将每一个可迭代对象中的每一个元素赋给临时变量,再执行循环)

for 临时变量 in 可迭代对象:
    循环体

break                           #完全结束一个循环,跳出循环执行后面的语句
continue                        #只终止本次循环,继续执行后面的循环
range(1,10,1)                   #生成从1开始10为止(不包括10),步长为1的数列
                                (1,2,3,4,5,6,7,8,9),产生的是一个迭代对象
                                 如果要产生列表,需要将生成的结果用list()函数转换

----------列表(可变序列)----------(单个元素)
(列表用[]来表示列表,并且用,来分隔其中的元素)
可以通过对列表元素索引的重新赋值来更换列表元素x[-2]="hello"
删除列表元素可以用del,如del x[-2]
如果不知道索引,只知道要删除的元素值,则需要使用remove()方法如x.remove("hello")
使用remove时,被删除的值无法被接收,因为remove()函数没有返回值。

列表生成式x=[i for i in range(1,100,1)]
[表达列表元素的表达式 for 自定义变量 in 可迭代对象]

————切片操作(至少删除一个元素,但将产生一个新的列表对象)
列表名[start:stop:step]
切片的结果：原列表片段的拷贝
可以在切片位置添加元素

列表的直接赋值操作是使地址指向相同,所以其中一个元素内存地址中的值改变时,同个列表
都会发生改变。

需引用import copy
浅复制x2=x.copy()               #只复制表层,内层还是和原列表相同
深复制x2=x.deepcopy()           #完全复制,有独立的内存空间,和原列表无关系

del可以删除列表,而clear()可以清空列表

x.                              #表示让python让对名为x的变量执行点后面的方法
x.append()                      #在名为x的列表的末尾添加()元素       '栈'
x.pop()                         #pop()方法不指定参数可删除列表末尾的元素,
                                 并且可以接着用它,列表就像一个数据中的栈
len(x)                          #确定名为x的列表有几个元素

x.sort()                        #对列表进行排序
x.sort(reverse=True)            #反向排序
sort排序为永久排序,无法恢复原来排序,临时排序可以用sorted()

x.insert()                      #在名为x的列表'插队'添加()元素,如(2,"world")
x.index()                       #从名为x的列表中获取()内参数的索引
x.title()                       #把名为x的列表字符串每个单词首字母变成大写
x.upper()                       #把字符串的字母全部变为大写
x.lpwer()                       #把字符串的字母全部变为小写
x.rstrip()                      #清除字符串末尾的空白
x.lstrip()                      #清除字符串开头的空白

----------字典(可变序列)----------(对)(空间换时间的数据结构)
字典名={'张三':3,'李四':4,'王五':5}
字典是以'键'用：来对应值。以键值对的方式储存数据,是一个无序的序列。

字典的创建也可以用dict()创建。
dict(name='张三',age=3)
=左边的是键,右边的是值,是否使用''取决于元素的类型。

可以直接用x={}创建空字典。

字典生成式
{key的表达式:value的表达式 for 自定义key的变量,自定义value的变量 in zip(可迭代对象,可迭代对象)}
{item:price for item,price in zip(items,prices)}

————字典中元素的获取
字典名[key]
[]如果字典中不存在指定的key,则会报错。

字典名.get(key)
get()如果字典中不存在指定的key,不会报错,而是返回None,
而且可以设定默认的value,比如字典名.get('张三',3),当字典中不存在张三时,会默认输出3。

————字典元素的新增
scores['李四']=4   (也可以用于修改值)

删除也可使用del方法

————获取字典视图
.keys()                         #获取字典中所有的key
.values()                       #获取字典中所有的values
.items()                        #获取字典中所有的key,value对 
所获取的元素的类型都是字典的类型,需要转类型,而items转类型的元素是元组。

————字典元素的遍历
for i in scores:                        #i获取的是字典当中的键
    print(i)                            #这样输出的还是键
    print(scores[i],scores.get(i))      #字典值的获取也是用[]或者get(key)
    
----------集合(可变序列)----------
集合是没有value的字典(和字典一样,key不能重复)
集合的创建可以直接用s={}
使用内置函数创建s=set()         #可以将其他类型的元素转成集合元素(字符串也可以)
集合中的元素是无序的。
集合生成式就是列表生成式的括号改成{}。

————集合的操作
集合元素的判断操作
in或not in

集合元素的新增操作
add()方法,一次添加一种元素
update()方法,至少添加一种元素

集合元素的删除操作
remove()方法,一次删除一个指定元素,不存在则抛出KeyError
discard()方法,一次删除一个指定元素,不存在不抛出异常
pop()方法,一次只删除一个任意元素
clear()方法,清空元素

————集合的关系
两集合是否相等
==

一个集合是否是另一个集合的子集
可以调用issubset判断

一个集合是否是另一个集合的超集
可以调用issuperset判断

两个集合是否没有交集
可以调用isdisjoint判断

————集合的数学操作
交集操作,intersection()与&

并集操作,union()与|

差集操作,difference与-

对称差集操作,symmetric_difference与^

----------元组(不可变序列)----------
————元组的创建方式
直接小括号
t=('hello','python',90)

使用内置函数tuple()
t=tuple(('hello','python',90))

只包含一个元组的元素需要使用逗号和小括号。
t=(90,)

空元组也可t=()

元组是可迭代对象,所以可以用for in去遍历。

----------字符串(不可变字符序列)----------
————驻留机制
驻留机制的几种情况(交互模式)
这里强调交互模式,是因为pycharm等平台对字符串做了优化,本来不符合的字符串也会指向同一个位置

字符串长度为0或者1
符合标识符的字符串(只包含字符数字下划线)
字符串只在编译时进行驻留,而非运行时
[-5,256]之间的整数数字

————查询操作
index()     查找子串第一次出现的位置,如果查找的子串不存在时,则会抛出ValueError
rindex()    查找子串最后一次出现的位置,果查找的子串不存在时,则会抛出ValueError
find()      查找子串第一次出现的位置,如果查找的子串不存在时,则会返回-1
rfind()     查找子串最后一次出现的位置,果查找的子串不存在时,则会返回-1

————对齐操作
center()    居中对齐
ljust()     左对齐
rjust()     右对齐
zfill()     右对齐(只接受一个参数指定宽度,小于字符串本身则返回字符串本身)

————字符串的劈分
split()     从左开始劈分
rsplit()    从右开始劈分
用sep参数指定字符串的劈分符
用maxsplit参数指定最大劈分次数

————字符串的判断
isidentifier()  判断指定的字符串是不是合法的标识符
isspace()       判断指定的字符串是否全部由空白字符组成(回车、换行，水平制表符)
isalpha()       判断指定的字符串是否全部由字母组成
isdecimal()     判断指定字符串是否全部由十进制的数字组成
isnumeric()     判断指定字符串是否全部由数字组成
isalnum()       判断指定字符串是否全部由字母和数字组成

字符串的替换
replace()       第三个参数是指定最大的替换次数

字符串的合并
join()

字符串的不可变类型,切片操作将产生新的对象。

————格式化字符串
%作占位符
%s              字符串
%i或%d          整数
%f              浮点数
%10.3f          10表示的是宽度      .3表示的小数点后3位(精度)

'我叫%s,今年%d岁了' % (name,age)


{}作占位符
{0:10.3}        10表示的是宽度      .3表示的一共3位数(精度)(小数点后三位则要加f)

'我叫{0},今年{1}岁了，我真叫{0}'.format(name,age)


f格式化(f-string)
f'我叫{name},今年{age}岁了'


----------BUG处理----------
————try...except...except BaseException结构
对报错异常进行处理。
try:
    可能异常的代码
    
except 异常类型:
    异常处理结果
except BaseException:           (避免遗漏可能出现的异常，最后的判断)


————try...except...else结构
如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except块。


————try...except...else...finally结构
finally块无论是否发生异常都会被执行。


————常见异常类型

ZeroDivisionError               除（或取模）零（所有数据类型）
indexError                      序列中没有此索引（index）
KeyError                        映射中没有这个键
NameError                       未声明/初始化对象（没有属性）
SyntaxError                     Python语法错误
ValueError                      传入无效参数


%                               #取余符号(数值运算时)
/ /                             #整除符号
**                              #幂符号

\t                              #制表符
\n                              #换行符
\\                              #反斜杠
\'                              #单引号
\"                              #双引号
\r                              #回车

数学统计函数
min()                           #求最小值
max()                           #求最大值
sum()                           #求和
"""
